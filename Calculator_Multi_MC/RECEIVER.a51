ORG 00H
	OPERAND_1        EQU  R5
	OPERATOR         EQU  R6
    OPERAND_2        EQU  R7
	ACALL SERIAL_INITIALIZATION
	

AGAIN:
	ACALL SERIAL_RECEIVE_BYTE
	MOV OPERAND_1,A
	
	
	ACALL SERIAL_RECEIVE_BYTE
	MOV OPERAND_2,A
	
	ACALL SERIAL_RECEIVE_BYTE
	MOV OPERATOR,A

	
	CONTINUE:
	ACALL DELAY_HS
	
	MOV   A,OPERAND_1
	ACALL SERIAL_SEND_BYTE
	MOV   A,OPERAND_2
	ACALL SERIAL_SEND_BYTE
	MOV   A,OPERATOR
	ACALL SERIAL_SEND_BYTE
	
    ;division operation
	MOV A,OPERATOR
	CLR C
	SUBB A,#0X2F
	JZ D_O
	
	
	;multiplication operation
	MOV A,OPERATOR
	CLR C
	SUBB A,#0X2A
	JZ M_O
	
	;subtraction operation
	MOV A,OPERATOR
	CLR C
	SUBB A,#0X2D
	JZ S_O
	
	;add operation
	MOV A,OPERATOR
	CLR C
	SUBB A,#0X2B
	JZ A_O
	
	SJMP AGAIN
	
	D_O:	
		MOV A,#0X3D
		LCALL SERIAL_SEND_BYTE
		ACALL DELAY_MS
		LJMP DIVISION_OPERATION
		
	M_O:
		MOV A,#0X3D
		LCALL SERIAL_SEND_BYTE
		ACALL DELAY_MS
		LJMP MUL_OPERATION
	S_O:
		MOV A,#0X3D
		LCALL SERIAL_SEND_BYTE
		ACALL DELAY_MS
		LJMP SUB_OPERATION
	A_O:
		MOV A,#0X3D
		LCALL SERIAL_SEND_BYTE
		ACALL DELAY_MS
		LJMP ADD_OPERATION
		
	;---------------CALCULATOR_SUBROUTINES---------------	
	DIVISION_OPERATION:
	MOV A,OPERAND_1
	MOV B,OPERAND_2
	MOV R6,B 
	DIV AB
	ADD A,#30H
	ACALL SERIAL_SEND_BYTE
	ACALL DELAY_MS
	MOV A,#'.' 
	ACALL SERIAL_SEND_BYTE
	ACALL DELAY_MS
	MOV A,#10
	MUL AB
	MOV B,R6
	DIV AB 
	ADD A,#30H
	ACALL SERIAL_SEND_BYTE
	ACALL DELAY_MS
	MOV A,#10
	MUL AB
	MOV B,R6
	DIV AB
	ADD A,#30H
	ACALL SERIAL_SEND_BYTE
	ACALL DELAY_MS
	LJMP AGAIN
	
	MUL_OPERATION:
	
	MOV A,OPERAND_1
	MOV B,OPERAND_2
	MUL AB
	ACALL CONVERT
	

	LJMP AGAIN
	
	SUB_OPERATION:
	CLR C
	MOV A,OPERAND_1
	SUBB A,OPERAND_2
	JC NEGATIVE
	ADD A,#0X30
	LCALL SERIAL_SEND_BYTE
	ACALL DELAY_MS
	
	MOV A,#0X20
	ACALL SERIAL_SEND_BYTE
	ACALL DELAY_MS
	MOV A,#0X20
	ACALL SERIAL_SEND_BYTE
	ACALL DELAY_MS
	
	LJMP AGAIN
	NEGATIVE:
	MOV R6,A
	MOV A,#'-'
	ACALL SERIAL_SEND_BYTE
	ACALL DELAY_MS
	MOV A,R6
	CPL A
	ADD A,#0X31
	ACALL SERIAL_SEND_BYTE
	ACALL DELAY_MS
	
	MOV A,#0X20
	ACALL SERIAL_SEND_BYTE
	ACALL DELAY_MS
	
	LJMP AGAIN
	
	ADD_OPERATION:
	MOV A,OPERAND_1
	ADD A,OPERAND_2
	ACALL CONVERT
	LJMP AGAIN
	
CONVERT:
    MOV B,#10
	DIV AB
	ADD A,#30H
	ACALL SERIAL_SEND_BYTE
	ACALL DELAY_MS
	MOV A,B
	ADD A,#30H
	ACALL SERIAL_SEND_BYTE
	ACALL DELAY_MS

	MOV A,#0X20
	ACALL SERIAL_SEND_BYTE
	ACALL DELAY_MS
	
	RET
	
;-----------------SERIAL_SUBROUTENS--------------
	SERIAL_INITIALIZATION:
	
		MOV TMOD,#0X20
		MOV TH1,#-3   ;9600 baud rate
		MOV SCON,#0X50
		SETB TR1
		SETB REN
	RET
	
	SERIAL_SEND_BYTE:
		MOV SBUF,A
		TRANSMIT_LOOP:
		JNB TI,TRANSMIT_LOOP
		CLR TI
	RET
	
	SERIAL_RECEIVE_BYTE:
		RECEIVE_LOOP:
		JNB RI,RECEIVE_LOOP
		MOV A,SBUF
		CLR RI
	RET
;-------------------------DELAY---------------------
	DELAY_MS:
			MOV R0,#255
			LOOP_2:
				MOV R1,#255
			LOOP_1:
				DJNZ R1,LOOP_1
		        DJNZ R0,LOOP_2
				RET
	DELAY_HS:
			MOV R0,#10
			LOOP__3: MOV R1,#100
			LOOP__2: MOV R2,#200
			LOOP__1: DJNZ R2,LOOP__1
					 DJNZ R1,LOOP__2
					 DJNZ R0,LOOP__3
			RET
	
	END